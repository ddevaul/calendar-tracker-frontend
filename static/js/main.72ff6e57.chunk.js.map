{"version":3,"sources":["components/day.js","components/month.js","components/editDay.js","components/legend.js","components/home.js","App.js","reportWebVitals.js","index.js"],"names":["Day","props","colorDivColor","emoji","date","Date","day","useState","isCurrentDay","setIsCurrentDay","useEffect","currentDate","getFullYear","getMonth","getDate","feeling","style","color","height","colorDivStyle","backgroundColor","className","onClick","setEditDay","fontWeight","Month","days","setDays","stats","setStats","getStats","addBlankDays","tempStats","best","amazing","average","bad","averageRating","tempYearStats","yearStats","ratingSum","ratedDays","month","forEach","rating","setYearStats","firstDate","getDay","tempDays","i","blank","dayNameStyle","margin","fontSize","borderBottom","padding","name","display","flexDirection","justifyContent","marginTop","gridTemplateColumns","map","index","EditDay","setDate","description","setDescription","setFeeling","setRating","updateDay","a","requestOptions","method","headers","body","JSON","stringify","fetch","process","_id","labelStyle","marginBottom","alignItems","onSubmit","onChange","e","target","value","placeholder","type","checked","min","max","Legend","legendRowStyle","marginRight","width","Home","year","setYear","editDay","yearID","json","jYearID","tempYear","jTempYear","getYearInfo","paddingBottom","months","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72ff6e57.chunk.js","sourcesContent":["import Mood from \"@material-ui/icons/Mood\";\nimport MoodBad from \"@material-ui/icons/MoodBad\";\nimport SentimentSatisfied from \"@material-ui/icons/SentimentSatisfied\";\nimport { useState, useEffect } from \"react\";\n\n\nconst Day = (props) => {\n  const date = new Date(props.day.date);\n  const [isCurrentDay, setIsCurrentDay] = useState(false);\n\n  useEffect(() => {\n    const currentDate = new Date();\n    if (currentDate.getFullYear() === date.getFullYear() \n    && currentDate.getMonth() === date.getMonth() \n    && currentDate.getDate() === date.getDate()) {\n      setIsCurrentDay(true);\n    } else {\n      setIsCurrentDay(false);\n    }\n  }, []);\n\n  let colorDivColor;\n  let emoji;\n  switch (props.day.feeling) {\n    case \"Bad\":\n      colorDivColor = \"red\";\n      emoji = <MoodBad></MoodBad>\n      break;\n    case \"Average\":\n      colorDivColor = \"black\";\n      emoji = <SentimentSatisfied></SentimentSatisfied>\n      break;\n    case \"Amazing\":\n        colorDivColor = \"green\";\n        emoji = <Mood></Mood>\n      break;\n    case \"Best Day Ever\":\n        colorDivColor = \"pink\";\n        emoji = <Mood style={{ color: \"pink\" }}></Mood>\n        break;\n    default: \n      colorDivColor = \"white\";\n      emoji = <div style={{ height: \"27px\" }}></div>\n  }\n\n  const colorDivStyle = {\n    height: \"20px\",\n    backgroundColor: `${colorDivColor}`\n  }\n  const dayNumberStyle = {\n    fontWeight: \"bold\"\n  }\n  if (!props.day.date) {\n    return <div></div>\n  }\n  return (\n    <div className={isCurrentDay ? \"day currentDay\" : \"day\"} onClick={() => props.setEditDay(props.day)}>\n      <div style={dayNumberStyle}>{date.getDate()}</div>\n      <div>{emoji}</div>\n      <div style={colorDivStyle}></div>\n    </div>\n  );\n}\n\nexport default Day;","import Day from \"./day.js\";\nimport { useState, useEffect } from \"react\";\n\nconst Month = (props) => {\n  const [days, setDays] = useState([]);\n  const [stats, setStats] = useState({});\n\n  useEffect(() => {\n    getStats();\n    addBlankDays();\n  }, []);\n\n  const getStats = () => {\n    let tempStats = {\n      best: 0,\n      amazing: 0,\n      average: 0,\n      bad: 0,\n      averageRating: 0,\n    };\n    let tempYearStats = props.yearStats;\n    let ratingSum = 0;\n    let ratedDays = 0;\n    props.month.days.forEach(day => {\n      switch(day.feeling) {\n        case(\"Best Day Ever\"):\n          tempStats.best++;\n          tempYearStats.best++;\n          break;\n        case(\"Amazing\"):\n          tempStats.amazing++;\n          tempYearStats.amazing++;\n          break;\n        case(\"Average\"):\n          tempStats.average++;\n          tempYearStats.average++;\n          break;\n        case(\"Bad\"):\n          tempStats.bad++;\n          tempYearStats.bad++;\n          break;\n        default: \n          break;\n      }\n      if (day.rating > 0) {\n        ratingSum += day.rating;\n        ratedDays++;\n        tempYearStats.ratingSum += day.rating;\n        tempYearStats.ratedDays++;\n      }\n    });\n    tempStats.averageRating = ratingSum/ratedDays;\n    setStats({...tempStats});\n    props.setYearStats({...tempYearStats});\n  }\n\n  const addBlankDays = () => {\n    const firstDate = new Date(props.month.days[0].date).getDay();\n    let tempDays = props.month.days;\n    for (let i = 0; i < firstDate; i++) {\n      let tempDay = { blank: true };\n      tempDays = [tempDay, ...tempDays]\n    }\n    setDays(tempDays);\n  }\n  const outerDivStyle = {\n    borderBottom: \"1px solid black\",\n    padding: \"1rem\"\n  }\n  const gridDiv = {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(7, 1fr)',\n  }\n  const monthNameStyle = {\n    fontSize: \"2rem\",\n    fontWeight: \"bold\",\n  }\n  const statsDivStyle = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: \"1rem\",\n  }\n  const dayNameStyle = {\n    margin: \"1rem\",\n    fontSize: \"1.5rem\"\n  }\n\n  return (\n    <div style={outerDivStyle}>\n        <div style={monthNameStyle}>{props.month.name}</div>\n        <div style={statsDivStyle}>\n          {stats.best > 0 ? <div>{stats.best} Best Day{stats.best > 1 ? \"s\" : \"\"} Ever</div> : <div></div>}\n          {stats.amazing > 0 ? <div>{stats.amazing} Amazing Day{stats.amazing > 1 ? \"s\" : \"\"}</div> : <div></div>}\n          {stats.average > 0 ? <div>{stats.average} Average Day{stats.average > 1 ? \"s\" : \"\"}</div> : <div></div>}\n          {stats.bad > 0 ? <div>{stats.bad} Bad Day{stats.bad > 1 ? \"s\" : \"\"}</div> : <div></div>}\n          {stats.averageRating > 0 ? <div>Average Rating For Day: {stats.averageRating}</div> : <div></div>}\n        </div>\n        <div style={gridDiv}>\n          <div style={dayNameStyle}>Sunday</div>\n          <div style={dayNameStyle}>Monday</div>\n          <div style={dayNameStyle}>Tuesday</div>\n          <div style={dayNameStyle}>Wednesday</div>\n          <div style={dayNameStyle}>Thursday</div>\n          <div style={dayNameStyle}>Friday</div>\n          <div style={dayNameStyle}>Saturday</div>\n          {days.map((day, index) => {\n            return <Day setEditDay={props.setEditDay} key={index} day={day}></Day>\n          })}\n        </div>\n    </div>\n  );\n}\n\nexport default Month;","import { useState, useEffect } from \"react\";\n\nconst EditDay = (props) => {\n  const [date, setDate] = useState();\n  const [description, setDescription] = useState();\n  const [feeling, setFeeling] = useState();\n  const [rating, setRating] = useState();\n\n  const updateDay = async () => {\n    const requestOptions = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ \n        description: description ? description : \"\",\n        feeling: feeling ? feeling : \"\",\n        rating: rating ? rating : \"\",\n      })\n    }\n    await fetch(`${process.env.REACT_APP_BACKEND_URL}/day/${props.day._id}`, requestOptions);\n  }\n\n  useEffect(() => {\n    setDate(new Date(props.day.date));\n    setDescription(props.day.description);\n    setFeeling(props.day.feeling);\n    setRating(props.day.rating);\n  }, []);\n\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n  const outerDivStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n\n  const headerStyle = {\n    fontSize: \"2rem\",\n    margin: \"1rem\"\n  }\n  const formStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n\n  const labelStyle = {\n    marginTop: \"1rem\",\n    marginBottom: \"0.5rem\"\n  }\n\n  const buttonGroupStyle = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  }\n  const ratingGroupStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n  const backButtonStyle = {\n    margin: \"1rem\"\n  }\n\n  return (\n    <div style={outerDivStyle}>\n      <div style={headerStyle}>{date && `${days[date.getDay()]} ${months[date.getMonth()]} ${date.getDate()} ${date.getFullYear()}`}</div>\n      <form onSubmit={updateDay} style={formStyle}>\n        <div style={labelStyle}>Description of your day!</div>\n        <textarea onChange={e => setDescription(e.target.value)} value={description} placeholder=\"Describe Your Day\"></textarea>\n        <div style={labelStyle}>Pick a description of your day!</div>\n        <div style={buttonGroupStyle}>\n          <label>Bad</label>\n          <input type=\"radio\" name=\"rating\"  checked={feeling===\"Bad\"}  onChange={() => setFeeling(\"Bad\")}></input>\n          <label>Average</label>\n          <input type=\"radio\" name=\"rating\" checked={feeling===\"Average\"} onChange={() => setFeeling(\"Average\")}></input>\n          <label>Amazing</label>\n          <input type=\"radio\" name=\"rating\" checked={feeling===\"Amazing\"} onChange={() => setFeeling(\"Amazing\")}></input>\n          <label>Best Day Ever</label>\n          <input type=\"radio\" name=\"rating\" checked={feeling===\"Best Day Ever\"} onChange={() => setFeeling(\"Best Day Ever\")}></input>\n        </div>\n        <div style={ratingGroupStyle}>\n          <div style={labelStyle}>Rate Your Day on a Scale From 1-10</div>\n          <input value={props.day.rating} type=\"number\" min=\"1\" max=\"10\" onChange={e => setRating(e.target.value)}></input>\n        </div>\n        <button style={backButtonStyle} type=\"submit\">Done</button>\n      </form>\n    </div>\n  )\n}\n\nexport default EditDay;","import Mood from \"@material-ui/icons/Mood\";\nimport MoodBad from \"@material-ui/icons/MoodBad\";\nimport SentimentSatisfied from \"@material-ui/icons/SentimentSatisfied\";\n\nconst Legend = () => {\n  const outerDivStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: \"1rem\",\n    borderBottom: \"1px solid black\",\n  }\n  const legendHeader = {\n    fontSize: \"1.5rem\",\n    fontWeight: \"bold\"\n  }\n  const legendRow = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  }\n  const legendRowStyle = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginRight: \"20px\"\n  }\n  return (\n    <div style={outerDivStyle}>\n      <div style={legendHeader}>Legend:</div>\n      <div style={legendRow}>\n          <div style={legendRowStyle}>\n            <div>Best Day Ever</div>\n            <Mood style={{ color: \"pink\" }}></Mood>\n            <div style={{ height: \"20px\", width: \"20px\", backgroundColor: \"pink\" }}></div>\n          </div>\n          <div style={legendRowStyle}>\n            <div>Amazing</div>\n            <Mood></Mood>\n            <div style={{ height: \"20px\", width: \"20px\", backgroundColor: \"green\" }}></div>\n          </div>\n          <div style={legendRowStyle}>\n            <div>Average</div>\n            <SentimentSatisfied></SentimentSatisfied>\n            <div style={{ height: \"20px\", width: \"20px\", backgroundColor: \"black\" }}></div>\n          </div>\n          <div style={legendRowStyle}>\n            <div>Bad</div>\n            <MoodBad></MoodBad>\n            <div style={{ height: \"20px\", width: \"20px\", backgroundColor: \"red\" }}></div>\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Legend;","import Month from \"./month.js\";\nimport EditDay from \"./editDay.js\";\nimport Legend from \"./legend\";\n\nimport { useState, useEffect } from \"react\";\n\nconst Home = () => {\n  const [year, setYear] = useState({});\n  const [yearStats, setYearStats] = useState({\n    best: 0,\n    amazing: 0,\n    average: 0,\n    bad: 0,\n    ratedDays: 0,\n    ratingSum: 0,\n  });\n  const [editDay, setEditDay] = useState(null);\n\n  useEffect(() => {\n    const getYearInfo = async () => {\n      const yearID = await fetch(`${process.env.REACT_APP_BACKEND_URL}/year/`);\n      const jYearID = await yearID.json();\n      const tempYear = await fetch(`${process.env.REACT_APP_BACKEND_URL}/year/${jYearID[0]._id}/`);\n      const jTempYear = await tempYear.json();\n      setYear(jTempYear);\n    }\n    getYearInfo();\n  }, []);\n\n  if (editDay) {\n    return (\n      <EditDay day={editDay} setEditDay={setEditDay}></EditDay>\n    );\n  }\n  const yearDivStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n  }\n  const yearHeaderStyle = {\n    fontSize: \"4rem\",\n    fontWeight: \"bold\",\n    margin: \"auto\"\n  }\n  const statsDivStyle = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-around\",\n    borderBottom: \"1px solid black\",\n    paddingBottom: \"1rem\",\n  }\n  return (\n    <div>\n        {year[0] && \n          <div style={yearDivStyle}>\n            <div style={yearHeaderStyle}>{year[0].year} </div> \n            <div style={statsDivStyle}> \n              <div>{yearStats.best} Best Day{yearStats.best > 1 ? \"s\" : \"\"} Ever</div>\n              <div>{yearStats.amazing} Amazing Day{yearStats.amazing > 1 ? \"s\" : \"\"}</div>\n              <div>{yearStats.average} Average Day{yearStats.average > 1 ? \"s\" : \"\"}</div>\n              <div>{yearStats.bad} Bad Day{yearStats.bad > 1 ? \"s\" : \"\"}</div>\n              <div> Average Day Rating: {yearStats.ratingSum/yearStats.ratedDays} </div>\n            </div>\n          </div>\n          }\n        <Legend></Legend>\n        {year[0] && year[0].months.map((month, index) => {\n          return (\n            <Month key={index} month={month} setEditDay={setEditDay} yearStats={yearStats} setYearStats={setYearStats}></Month>\n          );\n        })}\n    </div>\n  )\n}\n\nexport default Home;","import Home from \"./components/home.js\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <Home></Home>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}